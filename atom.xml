<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猪猪的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-24T04:44:02.382Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhuzhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三角形的N种画法</title>
    <link href="http://yoursite.com/2019/10/21/%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84N%E7%A7%8D%E7%94%BB%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/21/三角形的N种画法/</id>
    <published>2019-10-21T13:50:18.000Z</published>
    <updated>2019-10-24T04:44:02.382Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍常用绘制三角形的技术和我在应用中的体会</p><h1 id="常用技术"><a href="#常用技术" class="headerlink" title="常用技术"></a>常用技术</h1><h2 id="border绘制"><a href="#border绘制" class="headerlink" title="border绘制"></a>border绘制</h2><p>一般应该都会先想到用border绘制</p><p>  原理：一个元素的边框分成四份，上右下左，以对角线为界。<br>  比如对于一个div,如下样式<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">border-style</span>: solid;</span><br><span class="line"><span class="attribute">border-width</span>: <span class="number">40px</span> <span class="number">40px</span> <span class="number">40px</span> <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#ff0000</span> <span class="number">#00ff00</span> <span class="number">#0000ff</span> <span class="number">#cccccc</span>;</span><br></pre></td></tr></table></figure><br>  结果会是这样<br>  <div align="center"><br>      <img src="/2019/10/21/%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84N%E7%A7%8D%E7%94%BB%E6%B3%95/1.png"><br>  </div><br>下面是三角形的代码示例，不规则的改变border的宽度就好</p><iframe src="https://codesandbox.io/embed/objective-wind-02ic9?fontsize=14" title="objective-wind-02ic9" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h2 id="svg绘制"><a href="#svg绘制" class="headerlink" title="svg绘制"></a>svg绘制</h2><p>使用svg绘制的话，其实更简单了</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg <span class="built_in">width</span>=<span class="string">"100"</span> <span class="built_in">height</span>=<span class="string">"100"</span>&gt;</span><br><span class="line">  &lt;<span class="built_in">polygon</span> <span class="built_in">points</span>=<span class="string">"0,0 100,0 50,100"</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/winter-hooks-ejotz?fontsize=14" title="winter-hooks-ejotz" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p>使用transform其实也很简单，只要大家记得平行四边形是两个三角形就可以了。</p><p>原理就是使用两个元素，子元素作为平行四边形旋转，父元素设置一个框，overflow截断。可以调整transform-origin的值，来帮助设定三角形的相对位置。</p><p>通过skew来确定不同形状的三角形，个人目前是设置一个和需要的角度相适应的tan宽、高，再旋转和skew。但是角度和我设想的略有偏差，比如下面代码不是15deg而是16.5deg的skew</p><p>具体实现见代码：</p><iframe src="https://codesandbox.io/embed/transform-triangle-vv9cd?fontsize=14" title="transform-triangle" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h2 id="clip-path"><a href="#clip-path" class="headerlink" title="clip-path"></a>clip-path</h2><p>还有一种就是使用clip-path，其应用也很广泛。</p><iframe src="https://codesandbox.io/embed/great-fermat-orbml?fontsize=14" title="great-fermat-orbml" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><div class="zhuzhu-hr"></div><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>如果之前有人给我看一篇这样的博客，我一定会觉得他是孔乙己，但是最近碰到两个需求，尝试了不同方法实现。</p><h2 id="hover一个三角形"><a href="#hover一个三角形" class="headerlink" title="hover一个三角形"></a>hover一个三角形</h2><p>如果大家打开控制台，会发现，使用border、svg、clip-path创建的三角形还是表现为一个”矩形”<br><img src="/2019/10/21/%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84N%E7%A7%8D%E7%94%BB%E6%B3%95/2.png" alt="hover"><br>只有使用transfrom方法的才会是一个三角形，方便实现hover一个三角形元素时的效果。</p><h2 id="带透明度的tooltip、对话框啥的"><a href="#带透明度的tooltip、对话框啥的" class="headerlink" title="带透明度的tooltip、对话框啥的"></a>带透明度的tooltip、对话框啥的</h2><p>这种就比较适合使用border了，以免发生重叠。</p><h1 id="其他一些有的没的"><a href="#其他一些有的没的" class="headerlink" title="其他一些有的没的"></a>其他一些有的没的</h1><p>在使用上述几种方法绘制三角形时，有时候要选择使用嵌套元素或者伪类元素，目前觉得虽然代码不一样，但是没有明显的差异。</p><p>至于一些不同形状的三角形，比如描边三角形，可以使用两个三角形来模拟或者如果有的实现方式下直接描边；空心三角形使用border比较好。</p><p>一个利用padding,transform,切割图片为三角形的例子。也可以clip-path图片等<br><a href="https://codepen.io/web-tiki/pen/ntmDK" target="_blank" rel="noopener">https://codepen.io/web-tiki/pen/ntmDK</a></p><div class="zhuzhu-hr"></div>呜呜呜，回看了一边博客，写得着实不太好。当初我也是语文小健将来着，现在退步了。]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇文章主要介绍常用绘制三角形的技术和我在应用中的体会&lt;/p&gt;
&lt;h1 id=&quot;常用技术&quot;&gt;&lt;a href=&quot;#常用技术&quot; class=&quot;headerlink&quot; title=&quot;常用技术&quot;&gt;&lt;/a&gt;常用技术&lt;/h1&gt;&lt;h2 id=&quot;border绘制&quot;&gt;&lt;a href=&quot;#bo
      
    
    </summary>
    
    
      <category term="frontend" scheme="http://yoursite.com/categories/frontend/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>130. Surrounded Regions</title>
    <link href="http://yoursite.com/2019/10/21/130-Surrounded-Regions/"/>
    <id>http://yoursite.com/2019/10/21/130-Surrounded-Regions/</id>
    <published>2019-10-20T17:08:24.000Z</published>
    <updated>2019-10-20T18:19:28.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="/2019/10/21/130-Surrounded-Regions/1.png" alt="problem"></p><h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><p>就是要找到不在边界上的’O’连通块，或者在边界上的’O’连通块。</p><ul><li>联通：<ul><li>上下左右是不是’O’</li><li>dfs / bfs / Union-Find</li></ul></li><li>技巧<ul><li>通过改变char标记’O’是否已经是访问过</li></ul></li></ul><h2 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">int</span> c,r;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">void</span> solve(vector&lt;vector&lt;char&gt;&gt; &amp;board)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(board.size()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = board[<span class="number">0</span>].size();</span><br><span class="line">        r = board.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; c; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 第一行和最后一行所有元素</span></span><br><span class="line">            dfs(<span class="number">0</span>,i,board);</span><br><span class="line">            dfs(r<span class="number">-1</span>,i,board);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 第一列和最后一列所有的元素</span></span><br><span class="line">            dfs(i,<span class="number">0</span>,board);</span><br><span class="line">            dfs(i,c<span class="number">-1</span>,board);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; c; j++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(board[i][j] == <span class="string">'G'</span>) &#123;</span><br><span class="line">                   board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                   board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span> dfs(<span class="built_in">int</span> x, <span class="built_in">int</span> y,vector&lt;vector&lt;char&gt;&gt; &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=r||y&lt;<span class="number">0</span>||y&gt;=c||b[x][y]!=<span class="string">'O'</span>) <span class="keyword">return</span>;</span><br><span class="line">        b[x][y] = <span class="string">'G'</span>;</span><br><span class="line">        dfs(x<span class="number">-1</span>,y,b);</span><br><span class="line">        dfs(x+<span class="number">1</span>,y,b);</span><br><span class="line">        dfs(x,y<span class="number">-1</span>,b);</span><br><span class="line">        dfs(x,y+<span class="number">1</span>,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/10/21/130-Surrounded-Regions/1.png&quot; alt=&quot;probl
      
    
    </summary>
    
    
      <category term="alg" scheme="http://yoursite.com/categories/alg/"/>
    
    
      <category term="graph" scheme="http://yoursite.com/tags/graph/"/>
    
      <category term="dfs" scheme="http://yoursite.com/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>blog 1</title>
    <link href="http://yoursite.com/2019/10/19/blog-1/"/>
    <id>http://yoursite.com/2019/10/19/blog-1/</id>
    <published>2019-10-18T16:44:44.000Z</published>
    <updated>2019-10-18T18:17:14.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="终于决定写博客系列"><a href="#终于决定写博客系列" class="headerlink" title="终于决定写博客系列"></a>终于决定写博客系列</h1><p>最近看了一个很有意思的小说——《绝对笑喷之弃夜医生日志》，看了开头就让我决定再一次尝试写博客，希望后面能不鸽。</p><p>想想也希望用这种方式纪念我的黄金时代或职业生涯。</p><p>说起来，有这个想法的是这周三，当时我刚看了几段作者调侃初级医生职业的话，在洗澡有如文思泉涌，特别想写自己生活的段子。拖延到今天，已经是忘掉了所有俏皮的话。</p><p>哎，所以这第一篇就写到这吧，仪式已经有了。</p><h1 id="凑字数的分享"><a href="#凑字数的分享" class="headerlink" title="凑字数的分享"></a>凑字数的分享</h1><p>为了显得稍微丰满一点，不如再分享一下前几天看的王尔德的小说。</p><p>本来是看到了一句话：“请把你的心给我，与我为伍，这个世界太残酷，我有点害怕。” 因为好奇这个写了本书骂前任的小说家，是在什么语境下写出这样的句子，于是翻了翻， 这句话出自童话《渔夫和他的灵魂》，看网上有说这个一不小心成了他的童年阴影的23333。</p><p>整篇童话有很多隐喻，还和文化背景有关，第一遍真的没看懂。这句话并不是渔夫对恋人说的，而是他斩掉他的灵魂时，灵魂对他说的。</p><p>没有了心的灵魂，在世上游荡，无谓善无谓恶，获得了智慧，掠夺了财富，可是还是希望能回到渔夫身边。从侧面看，怀着爱与善良才能坚定地行走在人世间吧。</p><p>总之，王尔德的童话真的不错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;终于决定写博客系列&quot;&gt;&lt;a href=&quot;#终于决定写博客系列&quot; class=&quot;headerlink&quot; title=&quot;终于决定写博客系列&quot;&gt;&lt;/a&gt;终于决定写博客系列&lt;/h1&gt;&lt;p&gt;最近看了一个很有意思的小说——《绝对笑喷之弃夜医生日志》，看了开头就让我决定再一次尝
      
    
    </summary>
    
    
      <category term="journal" scheme="http://yoursite.com/categories/journal/"/>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
  </entry>
  
</feed>
