[{"title":"react hooks 状态管理","url":"http://yoursite.com/2019/11/18/react-hooks-状态管理/","content":"<p>hooks出了以后，还没有用来写过比较复杂的项目，有点好奇Hooks时代的状态管理，找了一些资料，总结在这里。</p>\n<h1 id=\"使用React-Hooks代替Redux\"><a href=\"#使用React-Hooks代替Redux\" class=\"headerlink\" title=\"使用React Hooks代替Redux\"></a>使用React Hooks代替Redux</h1><p>这篇文章主要是介绍了React Hooks使用useReducer的方式，写的方式有点类似之前React-Redux使用的感觉，文章给出了<a href=\"https://github.com/hangyangws/hooks-ts-test/tree/real-multiple-store\" target=\"_blank\" rel=\"noopener\">样板代码</a>，并提供了来自issue的一个<a href=\"https://link.zhihu.com/?target=https%3A//github.com/facebook/react/issues/14520\">管理multiple ContextProvider</a>的方法。</p>\n<p>目前感觉是不是按照redux的思路，然后套了一遍？</p>\n<h3 id=\"基本分析\"><a href=\"#基本分析\" class=\"headerlink\" title=\"基本分析\"></a>基本分析</h3><p>redux实现了全局state、处理全局state的方式和统一的数据处理中心，也就是store、dispatch、reducer<br><img src=\"/2019/11/18/react-hooks-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/2019-11-18-20-45-58.png\" alt></p>\n<p>从 hooks 数据流能大致看出来，我们设计好 store 后，通过对应的 hooks 函数生成每个 store 的 Provider 和 Context。我们把所有的单个 Provider 糅合为一个整体的 Providers，作为所有 UI 的父组件。</p>\n<p>在任何一个子 UI 组件内部，通过 hooks 函数得到对应 store 的 state、dispatch。UI 组件内，通过主动调用 dispatch 发送 action，然后经过 store 的数据处理中心 reducer，就能触发相应的数据改变。这个数据流程和 redux 几乎一模一样。</p>\n<p>在之前重新了解了一遍MVVM之后,我发现这个模式很好理解.以下描述不一定准确:<br>我有一个数据仓库(store),这个仓库放着各种货架; 不同时期具体放着不同商品(state). 顾客可以在前台看到有什么,并可以通知仓库的管理人员,当这样的事件触发后, 仓库进行分拣包装.</p>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><ol>\n<li>统一 store 数据管理</li>\n<li>支持以发送 action 来修改数据</li>\n<li>支持 action 处理中心：reducer<h3 id=\"异同点\"><a href=\"#异同点\" class=\"headerlink\" title=\"异同点\"></a>异同点</h3>hooks UI 层获取 store 和 dispatch 不需要用 HOC 依赖注入，而是用 useContext<br>redux 在 action 之后改变视图本质上还是 state 注入的方式修改的组件内部 state，而 hooks 则是一对一的数据触发<br>hooks 的 reducer 来自于 useReducer<br>hooks 还没有 middleware 的解决方案</li>\n</ol>\n<p>origial article: <a href=\"https://zhuanlan.zhihu.com/p/66020264\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/66020264</a></p>\n<h1 id=\"State-Management-with-React-Hooks-—-No-Redux-or-Context-API\"><a href=\"#State-Management-with-React-Hooks-—-No-Redux-or-Context-API\" class=\"headerlink\" title=\"State Management with React Hooks — No Redux or Context API\"></a>State Management with React Hooks — No Redux or Context API</h1><p>这篇文章是介绍如何自定义Hooks来管理状态。作者开发了use-global-hook包。可以用来理解基本思路。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>因为增加的hooks里,对函数组件的state管理本身是：使用useState()返回state和一个更新state、并影响dom的函数。我觉得用MVVM的思想理解一下，就是这个函数就是VM。而如果在state变化后,调用不止一个组件的相关state的更新函数,就是在共享状态啦.<br><img src=\"/2019/11/18/react-hooks-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/2019-11-19-03-13-04.png\" alt></p>\n<h2 id=\"first-version\"><a href=\"#first-version\" class=\"headerlink\" title=\"first version\"></a>first version</h2><p>这里博主介绍了他的实现方式，开始看觉得不太能理解。有另外一篇介绍hooks的博客，展示了useState的简单实现<a href=\"https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e\" target=\"_blank\" rel=\"noopener\">参考</a>,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> state = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> setters = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> firstRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cursor = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createSetter</span>(<span class=\"params\">cursor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setterWithCursor</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">    state[cursor] = newVal;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This is the pseudocode for the useState helper</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useState</span>(<span class=\"params\">initVal</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (firstRun) &#123;</span><br><span class=\"line\">    state.push(initVal);</span><br><span class=\"line\">    setters.push(createSetter(cursor));</span><br><span class=\"line\">    firstRun = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setter = setters[cursor];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = state[cursor];</span><br><span class=\"line\"></span><br><span class=\"line\">  cursor++;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [value, setter];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中，useState维护一个state和setters数组，数组下标和执行的次数有关；每次返回state的值和修改的函数。</p>\n<p>再来看文章给出的第一个版本</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">let listeners = [];</span><br><span class=\"line\">let <span class=\"keyword\">state</span> = &#123; counter: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"built_in\">set</span>State = newState =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span> = &#123; ...<span class=\"keyword\">state</span>, ...newState &#125;;</span><br><span class=\"line\">  listeners.<span class=\"keyword\">for</span>Each(listener =&gt; &#123;</span><br><span class=\"line\">    listener(<span class=\"keyword\">state</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const useCustom = () =&gt; &#123;</span><br><span class=\"line\">  const newListener = useState()[<span class=\"number\">1</span>];</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    listeners.push(newListener);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  return [<span class=\"keyword\">state</span>, <span class=\"built_in\">set</span>State];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> useCustom;</span><br></pre></td></tr></table></figure>\n<p>个人感觉有点像装饰器模式，在使用useState时进行封装。初始化时，将listener加入数组；此后，返回值和更新state的方法。更新state，即修改state并通知listener。这里还可以研究一下useState具体的流程。</p>\n<h2 id=\"Second-Version\"><a href=\"#Second-Version\" class=\"headerlink\" title=\"Second Version\"></a>Second Version</h2><p>然后作者针对上一个版本的不足，提出了一些改进。</p>\n<h3 id=\"Calling-a-function-just-before-component-unmount\"><a href=\"#Calling-a-function-just-before-component-unmount\" class=\"headerlink\" title=\"Calling a function just before component unmount\"></a>Calling a function just before component unmount</h3><p>使用useEffect(function,[])，可以去模拟componentDiDMount()，初始化一次。<br>如果这个function返回一个函数，那么被返回的这个函数将会在组件挂载前被调用。作者认为可以使用这个方法，在组件挂载前移除listener。</p>\n<p>除此之外，创建了一个store object，存储state value and the setState() function。具体我注释到代码里了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span>(<span class=\"params\">newState</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state = &#123; ...this.state, ...newState &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.listeners.forEach(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    listener(<span class=\"keyword\">this</span>.state);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useCustom</span>(<span class=\"params\">React</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// pass React as a parameter, not importing int anymore</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newListener = React.useState()[<span class=\"number\">1</span>];</span><br><span class=\"line\">  React.useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Called just after component mount</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners.push(newListener);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Called just before the component unmount</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listeners = <span class=\"keyword\">this</span>.listeners.filter(<span class=\"function\"><span class=\"params\">listener</span> =&gt;</span> listener !== newListener);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"keyword\">this</span>.state, <span class=\"keyword\">this</span>.setState];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useGlobalHook = <span class=\"function\">(<span class=\"params\">React, initialState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// set initialState</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = &#123; <span class=\"attr\">state</span>: initialState, <span class=\"attr\">listeners</span>: [] &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// bind the store to this</span></span><br><span class=\"line\">  store.setState = setState.bind(store);</span><br></pre></td></tr></table></figure>\n<p>set up in a store file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> useGlobalHook <span class=\"keyword\">from</span> <span class=\"string\">'./useGlobalHook'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useGlobal = useGlobalHook(React, initialState);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useGlobal;</span><br></pre></td></tr></table></figure>\n<p>到这里，就想说之前看到有人说虽然redux有很多模板pattern，但是如果你自己写的话，最后就会变成那样子。现在就已经很像了。</p>\n<h2 id=\"final-version\"><a href=\"#final-version\" class=\"headerlink\" title=\"final version\"></a>final version</h2><p>这个版本，就是加入了action，分离业务逻辑。<br>其中关注：</p>\n<ol>\n<li>actions将有能力read state with <strong>store.state</strong>, write state through <strong>store.setSate()</strong>, call other actions using <strong>state.actions</strong></li>\n<li>允许有actions’ sub-objects</li>\n</ol>\n<h2 id=\"九月更新\"><a href=\"#九月更新\" class=\"headerlink\" title=\"九月更新\"></a>九月更新</h2><p>九月份的时候，作者更新了一下，可以将组件只绑定部分global state,避免其他state改变时，造成不必要的re-render。</p>\n<p>这里阅读这篇文章，我个人感觉是让我对这种使用观察者模式进行global state管理的一个介绍，因为作者是逐步叠加的，感觉是轻量的react-redux?至于到底要不要用这种方案，包括文章的评论区也有很多不同的声音。</p>\n<p>origial article: <a href=\"https://medium.com/javascript-in-plain-english/state-management-with-react-hooks-no-redux-or-context-api-8b3035ceecf8\" target=\"_blank\" rel=\"noopener\">https://medium.com/javascript-in-plain-english/state-management-with-react-hooks-no-redux-or-context-api-8b3035ceecf8</a></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"React’s-useReducer-vs-Redux\"><a href=\"#React’s-useReducer-vs-Redux\" class=\"headerlink\" title=\"React’s useReducer vs Redux\"></a>React’s useReducer vs Redux</h2><p>Redux creates a global state container which hangs somewhere above the whole application, while useReducer creates a independent component co-located state container within the component.<br>还有useReducer目前还没有相关的中间件库等。</p>\n<h1 id=\"Best-ways-to-use-React-Hooks-for-state-management\"><a href=\"#Best-ways-to-use-React-Hooks-for-state-management\" class=\"headerlink\" title=\"Best ways to use React Hooks for state management\"></a>Best ways to use React Hooks for state management</h1><p>有的文章探索了一些方式。大致上感觉就是props传递、使用customHook、使用useReducer，包括结合context api使用，还是可以使用redux等一些方案。</p>\n<p>还可以参考: <a href=\"https://dev.to/theodesp/best-ways-to-use-react-hooks-for-state-management-44h3\" target=\"_blank\" rel=\"noopener\">https://dev.to/theodesp/best-ways-to-use-react-hooks-for-state-management-44h3</a></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>具体使用感觉还是要看项目啦，后面准备实践一下useReducer，再探索一下customHooKs，如果确实有需要的地方，再上redux啦(●ˇ∀ˇ●)</p>\n","categories":["fronend"],"tags":["react","状态管理"]},{"title":"三角形的N种画法","url":"http://yoursite.com/2019/10/21/三角形的N种画法/","content":"<p>本篇文章主要介绍常用绘制三角形的技术和我在应用中的体会</p>\n<h1 id=\"常用技术\"><a href=\"#常用技术\" class=\"headerlink\" title=\"常用技术\"></a>常用技术</h1><h2 id=\"border绘制\"><a href=\"#border绘制\" class=\"headerlink\" title=\"border绘制\"></a>border绘制</h2><p>一般应该都会先想到用border绘制</p>\n<p>  原理：一个元素的边框分成四份，上右下左，以对角线为界。<br>  比如对于一个div,如下样式<br>  <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\"><span class=\"attribute\">border-width</span>: <span class=\"number\">40px</span> <span class=\"number\">40px</span> <span class=\"number\">40px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"attribute\">border-color</span>: <span class=\"number\">#ff0000</span> <span class=\"number\">#00ff00</span> <span class=\"number\">#0000ff</span> <span class=\"number\">#cccccc</span>;</span><br></pre></td></tr></table></figure><br>  结果会是这样<br>  <div align=\"center\"><br>      <img src=\"/2019/10/21/%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84N%E7%A7%8D%E7%94%BB%E6%B3%95/1.png\"><br>  </div><br>下面是三角形的代码示例，不规则的改变border的宽度就好</p>\n<iframe src=\"https://codesandbox.io/embed/objective-wind-02ic9?fontsize=14\" title=\"objective-wind-02ic9\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n\n<h2 id=\"svg绘制\"><a href=\"#svg绘制\" class=\"headerlink\" title=\"svg绘制\"></a>svg绘制</h2><p>使用svg绘制的话，其实更简单了</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg <span class=\"built_in\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"built_in\">height</span>=<span class=\"string\">\"100\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"built_in\">polygon</span> <span class=\"built_in\">points</span>=<span class=\"string\">\"0,0 100,0 50,100\"</span> /&gt;</span><br><span class=\"line\">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>\n<iframe src=\"https://codesandbox.io/embed/winter-hooks-ejotz?fontsize=14\" title=\"winter-hooks-ejotz\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n\n<h2 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h2><p>使用transform其实也很简单，只要大家记得平行四边形是两个三角形就可以了。</p>\n<p>原理就是使用两个元素，子元素作为平行四边形旋转，父元素设置一个框，overflow截断。可以调整transform-origin的值，来帮助设定三角形的相对位置。</p>\n<p>通过skew来确定不同形状的三角形，个人目前是设置一个和需要的角度相适应的tan宽、高，再旋转和skew。但是角度和我设想的略有偏差，比如下面代码不是15deg而是16.5deg的skew</p>\n<p>具体实现见代码：</p>\n<iframe src=\"https://codesandbox.io/embed/transform-triangle-vv9cd?fontsize=14\" title=\"transform-triangle\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n\n<h2 id=\"clip-path\"><a href=\"#clip-path\" class=\"headerlink\" title=\"clip-path\"></a>clip-path</h2><p>还有一种就是使用clip-path，其应用也很广泛。</p>\n<iframe src=\"https://codesandbox.io/embed/great-fermat-orbml?fontsize=14\" title=\"great-fermat-orbml\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n\n<div class=\"zhuzhu-hr\"></div>\n\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>如果之前有人给我看一篇这样的博客，我一定会觉得他是孔乙己，但是最近碰到两个需求，尝试了不同方法实现。</p>\n<h2 id=\"hover一个三角形\"><a href=\"#hover一个三角形\" class=\"headerlink\" title=\"hover一个三角形\"></a>hover一个三角形</h2><p>如果大家打开控制台，会发现，使用border、svg、clip-path创建的三角形还是表现为一个”矩形”<br><img src=\"/2019/10/21/%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84N%E7%A7%8D%E7%94%BB%E6%B3%95/2.png\" alt=\"hover\"><br>只有使用transfrom方法的才会是一个三角形，方便实现hover一个三角形元素时的效果。</p>\n<h2 id=\"带透明度的tooltip、对话框啥的\"><a href=\"#带透明度的tooltip、对话框啥的\" class=\"headerlink\" title=\"带透明度的tooltip、对话框啥的\"></a>带透明度的tooltip、对话框啥的</h2><p>这种就比较适合使用border了，以免发生重叠。</p>\n<h1 id=\"其他一些有的没的\"><a href=\"#其他一些有的没的\" class=\"headerlink\" title=\"其他一些有的没的\"></a>其他一些有的没的</h1><p>在使用上述几种方法绘制三角形时，有时候要选择使用嵌套元素或者伪类元素，目前觉得虽然代码不一样，但是没有明显的差异。</p>\n<p>至于一些不同形状的三角形，比如描边三角形，可以使用两个三角形来模拟或者如果有的实现方式下直接描边；空心三角形使用border比较好。</p>\n<p>一个利用padding,transform,切割图片为三角形的例子。也可以clip-path图片等<br><a href=\"https://codepen.io/web-tiki/pen/ntmDK\" target=\"_blank\" rel=\"noopener\">https://codepen.io/web-tiki/pen/ntmDK</a></p>\n<div class=\"zhuzhu-hr\"></div>\n呜呜呜，回看了一边博客，写得着实不太好。当初我也是语文小健将来着，现在退步了。","categories":["frontend"],"tags":["CSS"]},{"title":"130. Surrounded Regions","url":"http://yoursite.com/2019/10/21/130-Surrounded-Regions/","content":"<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p><img src=\"/2019/10/21/130-Surrounded-Regions/1.png\" alt=\"problem\"></p>\n<h1 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h1><p>就是要找到不在边界上的’O’连通块，或者在边界上的’O’连通块。</p>\n<ul>\n<li>联通：<ul>\n<li>上下左右是不是’O’</li>\n<li>dfs / bfs / Union-Find</li>\n</ul>\n</li>\n<li>技巧<ul>\n<li>通过改变char标记’O’是否已经是访问过</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dfs\"><a href=\"#dfs\" class=\"headerlink\" title=\"dfs\"></a>dfs</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"symbol\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">int</span> c,r;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">void</span> solve(vector&lt;vector&lt;char&gt;&gt; &amp;board)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(board.size()==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        c = board[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        r = board.size();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; c; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一行和最后一行所有元素</span></span><br><span class=\"line\">            dfs(<span class=\"number\">0</span>,i,board);</span><br><span class=\"line\">            dfs(r<span class=\"number\">-1</span>,i,board);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; r; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一列和最后一列所有的元素</span></span><br><span class=\"line\">            dfs(i,<span class=\"number\">0</span>,board);</span><br><span class=\"line\">            dfs(i,c<span class=\"number\">-1</span>,board);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; r; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; c; j++)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(board[i][j] == <span class=\"string\">'G'</span>) &#123;</span><br><span class=\"line\">                   board[i][j] = <span class=\"string\">'O'</span>;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(board[i][j] == <span class=\"string\">'O'</span>) &#123;</span><br><span class=\"line\">                   board[i][j] = <span class=\"string\">'X'</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> dfs(<span class=\"built_in\">int</span> x, <span class=\"built_in\">int</span> y,vector&lt;vector&lt;char&gt;&gt; &amp;b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>||x&gt;=r||y&lt;<span class=\"number\">0</span>||y&gt;=c||b[x][y]!=<span class=\"string\">'O'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        b[x][y] = <span class=\"string\">'G'</span>;</span><br><span class=\"line\">        dfs(x<span class=\"number\">-1</span>,y,b);</span><br><span class=\"line\">        dfs(x+<span class=\"number\">1</span>,y,b);</span><br><span class=\"line\">        dfs(x,y<span class=\"number\">-1</span>,b);</span><br><span class=\"line\">        dfs(x,y+<span class=\"number\">1</span>,b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","categories":["alg"],"tags":["graph","dfs"]},{"title":"blog 1","url":"http://yoursite.com/2019/10/19/blog-1/","content":"<h1 id=\"终于决定写博客系列\"><a href=\"#终于决定写博客系列\" class=\"headerlink\" title=\"终于决定写博客系列\"></a>终于决定写博客系列</h1><p>最近看了一个很有意思的小说——《绝对笑喷之弃夜医生日志》，看了开头就让我决定再一次尝试写博客，希望后面能不鸽。</p>\n<p>想想也希望用这种方式纪念我的黄金时代或职业生涯。</p>\n<p>说起来，有这个想法的是这周三，当时我刚看了几段作者调侃初级医生职业的话，在洗澡有如文思泉涌，特别想写自己生活的段子。拖延到今天，已经是忘掉了所有俏皮的话。</p>\n<p>哎，所以这第一篇就写到这吧，仪式已经有了。</p>\n<h1 id=\"凑字数的分享\"><a href=\"#凑字数的分享\" class=\"headerlink\" title=\"凑字数的分享\"></a>凑字数的分享</h1><p>为了显得稍微丰满一点，不如再分享一下前几天看的王尔德的小说。</p>\n<p>本来是看到了一句话：“请把你的心给我，与我为伍，这个世界太残酷，我有点害怕。” 因为好奇这个写了本书骂前任的小说家，是在什么语境下写出这样的句子，于是翻了翻， 这句话出自童话《渔夫和他的灵魂》，看网上有说这个一不小心成了他的童年阴影的23333。</p>\n<p>整篇童话有很多隐喻，还和文化背景有关，第一遍真的没看懂。这句话并不是渔夫对恋人说的，而是他斩掉他的灵魂时，灵魂对他说的。</p>\n<p>没有了心的灵魂，在世上游荡，无谓善无谓恶，获得了智慧，掠夺了财富，可是还是希望能回到渔夫身边。从侧面看，怀着爱与善良才能坚定地行走在人世间吧。</p>\n<p>总之，王尔德的童话真的不错。</p>\n","categories":["journal"],"tags":["test","book"]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/zhuzhu-style.css","content":".toolbox .list-toolbox {\n  display: block;\n  margin-left: 150px;\n}\n\n.toolbox:hover .list-toolbox li a {\n  animation-name: none !important;\n}\n\n.box-blog-info .info {\n  margin-left: 20px;\n  /* text-align: right; */\n}\n\n.toolbox .toolbox-entry {\n  background: transparent;\n}\n\n@media screen and (min-width: 768px) {\n  .page-header .box-blog-info {\n    display: flex;\n    justify-content: space-between;\n    margin: 0 -30px;\n  }\n  .page-header .box-blog-info .info h3 {\n    text-align: right;\n  }\n}\n\n.custome-main-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.custome-content-home {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: static;\n  margin: 10% auto 0;\n}\n\n.custome-main-page .post-list-box {\n  margin-top: -50px;\n}\n.custome-content-home hr {\n  width: 100%;\n}\n\n.article-content p {\n  letter-spacing: 1px !important;\n  line-height: 1.7 !important;\n  min-height: 1em !important;\n  box-sizing: border-box !important;\n  word-wrap: break-word !important;\n  text-align: justify;\n  margin: 20px 0 !important;\n}\n\n.article-content blockquote {\n  border-left: 10px solid rgba(128, 128, 128, 0.075);\n  background-color: rgba(128, 128, 128, 0.05);\n  padding: 13px 15px !important;\n  margin: 0px;\n}\n\n.article-content blockquote p {\n  color: #898989;\n  margin: 0px;\n}\n\n.article-content strong {\n  font-weight: normal;\n  color: #fd5b03;\n}\n\nbody {\n  font-size: 15px;\n}\n\n.article-content pre {\n  background-color: #f8f8f8;\n  border-radius: 3px;\n  word-wrap: break-word;\n  padding: 12px 13px;\n  font-size: 13px;\n  color: #898989;\n}\n\n.article-content h1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  word-break: break-all !important;\n  margin: 20px 0;\n  line-height: 1.2;\n  text-align: left;\n  font-weight: bold;\n  padding-left: 15px;\n}\n\n.article-content h1 {\n  border-left: 6px solid #71ba51 !important;\n  font-size: 24px !important;\n}\n\n.article-content h2 {\n  border-left: 4px solid #71ba51 !important;\n  font-size: 18px !important;\n}\n\n.article-content h3 {\n  border-left: 4px solid #71ba51 !important;\n}\n\n.article-content a {\n  color: #4183c4 !important;\n  text-decoration: none !important;\n}\n\n.article-content ul,\nol {\n  padding-left: 30px;\n}\n\n.article-content li {\n  line-height: 24px;\n}\n\n.article-content hr {\n  height: 4px;\n  padding: 0;\n  margin: 16px 0;\n  background-color: #e7e7e7;\n  border: 0 none;\n  overflow: hidden;\n  box-sizing: content-box;\n  border-bottom: 1px solid #ddd;\n}\n\n.article-content pre {\n  background: #f2f2f2 !important;\n  padding: 12px 13px;\n}\n\n.article-content code {\n  /* color: #a71d5d; */\n}\n\n.tag-box {\n  margin-bottom: 65px;\n}\n\n.zhuzhu-hr {\n    background-color: currentColor;\n    min-width: 50%;\n    height: 3px;\n    border: none;\n    margin: auto;\n    position: relative;\n    margin: 50px 0;\n}\n\n.zhuzhu-hr:before {\n  font-family: cursive;\n  content: '🐖';\n  display: block;\n  width: 20%;\n  padding: 0.3em;\n  font-size: 2em;\n  text-align: center;\n  position: absolute;\n  background: #fff;\n  top: 0;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  \n}","categories":[],"tags":[]}]